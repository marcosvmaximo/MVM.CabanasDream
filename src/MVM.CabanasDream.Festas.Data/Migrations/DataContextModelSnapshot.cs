// <auto-generated />
using System;
using MVM.CabanasDream.Festas.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVM.CabanasDream.Festas.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Entities.Administrador", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date")
                        .HasColumnName("data_nascimento");

                    b.Property<int>("NivelPermissao")
                        .HasColumnType("int")
                        .HasColumnName("nivel_permissao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome_completo");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("rg");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Administradores", (string)null);
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Entities.Cliente", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date")
                        .HasColumnName("data_nascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome_completo");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("rg");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Entities.Produto", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("NumeroSerie")
                        .HasColumnType("varchar(32)")
                        .HasColumnName("numero_de_serie");

                    b.Property<string>("TemaId")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("TimeStamp");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("tipo_produto");

                    b.Property<decimal>("ValorCompra")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("valor_compra");

                    b.Property<decimal>("ValorLocacao")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("valor_locacao");

                    b.HasKey("Id");

                    b.HasIndex("TemaId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Entities.Tema", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("descricao");

                    b.Property<bool>("Disponibilidade")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("disponibilidade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<decimal>("PrecoBase")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("preco_base");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Temas", (string)null);
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Festa", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("id");

                    b.Property<string>("AdministradorId")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("DataDevolucao")
                        .HasColumnType("date")
                        .HasColumnName("data_devolucao");

                    b.Property<DateTime>("DataRealizacao")
                        .HasColumnType("date")
                        .HasColumnName("data_realizacao");

                    b.Property<DateTime>("DataRetirada")
                        .HasColumnType("date")
                        .HasColumnName("data_retirada");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("observacao");

                    b.Property<int>("QuantidadeParticipantes")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_participantes");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("festa_status");

                    b.Property<string>("TemaId")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TemaId");

                    b.ToTable("Festa_Contrato", (string)null);
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Entities.Cliente", b =>
                {
                    b.OwnsOne("MVM.CabanasDream.Festas.Domain.ValueObjects.Contato", "Contato", b1 =>
                        {
                            b1.Property<string>("ClienteId")
                                .HasColumnType("varchar(32)");

                            b1.Property<string>("Ddd")
                                .IsRequired()
                                .HasColumnType("varchar(2)")
                                .HasColumnName("ddd");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email");

                            b1.Property<string>("Telefone")
                                .IsRequired()
                                .HasColumnType("varchar(10)")
                                .HasColumnName("telefone");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("MVM.CabanasDream.Festas.Domain.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<string>("ClienteId")
                                .HasColumnType("varchar(32)");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("bairro");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("varchar(8)")
                                .HasColumnName("cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("cidade");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasColumnType("varchar(2)")
                                .HasColumnName("estado");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("logradouro");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("pais");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Contato")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Entities.Produto", b =>
                {
                    b.HasOne("MVM.CabanasDream.Festas.Domain.Entities.Tema", "Tema")
                        .WithMany("Produtos")
                        .HasForeignKey("TemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tema");
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Festa", b =>
                {
                    b.HasOne("MVM.CabanasDream.Festas.Domain.Entities.Administrador", "Administrador")
                        .WithMany("Festas")
                        .HasForeignKey("AdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVM.CabanasDream.Festas.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Festas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVM.CabanasDream.Festas.Domain.Entities.Tema", "Tema")
                        .WithMany("Festas")
                        .HasForeignKey("TemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MVM.CabanasDream.Festas.Domain.ValueObjects.Contrato", "Contrato", b1 =>
                        {
                            b1.Property<string>("FestaId")
                                .HasColumnType("varchar(32)");

                            b1.Property<bool>("Assinado")
                                .HasColumnType("tinyint(1)")
                                .HasColumnName("assinado");

                            b1.Property<decimal>("Multa")
                                .HasColumnType("decimal(10, 2)")
                                .HasColumnName("multa");

                            b1.Property<int>("Status")
                                .HasColumnType("int")
                                .HasColumnName("contrato_status");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(10, 2)")
                                .HasColumnName("valor");

                            b1.HasKey("FestaId");

                            b1.ToTable("Festa_Contrato");

                            b1.WithOwner()
                                .HasForeignKey("FestaId");
                        });

                    b.Navigation("Administrador");

                    b.Navigation("Cliente");

                    b.Navigation("Contrato")
                        .IsRequired();

                    b.Navigation("Tema");
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Entities.Administrador", b =>
                {
                    b.Navigation("Festas");
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Festas");
                });

            modelBuilder.Entity("MVM.CabanasDream.Festas.Domain.Entities.Tema", b =>
                {
                    b.Navigation("Festas");

                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
